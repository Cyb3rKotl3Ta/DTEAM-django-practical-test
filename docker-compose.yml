version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: cvproject_db
    environment:
      POSTGRES_DB: cvproject
      POSTGRES_USER: cvproject_user
      POSTGRES_PASSWORD: cvproject_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cvproject_user -d cvproject"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cvproject_network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: cvproject_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cvproject_network

  # Django Web Application
  web:
    build: .
    container_name: cvproject_web
    environment:
      - DJANGO_ENV=production
      - DEBUG=False
      - SECRET_KEY=docker-secret-key-change-in-production
      - DATABASE_URL=postgresql://cvproject_user:cvproject_password@db:5432/cvproject
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cvproject_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cvproject_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - web
    networks:
      - cvproject_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  cvproject_network:
    driver: bridge
